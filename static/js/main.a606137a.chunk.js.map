{"version":3,"sources":["ValidateForm.js","Validate.js","App.js","serviceWorker.js","index.js"],"names":["ValidateForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bvn","handleChange","bind","assertThisInitialized","handleSubmit","evt","setState","defineProperty","target","name","value","preventDefault","isNaN","alert","length","validate","react_default","a","createElement","className","onSubmit","htmlFor","type","id","placeholder","onChange","required","disabled","isLoaded","isLoading","Component","Validate","data","renderDetails","submit","_this2","URL","concat","process","axios","get","then","response","status","details","st","objectSpread","_this$state","defaultValue","src_ValidateForm_0","App","src_Validate_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a606137a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./ValidateForm.css\";\r\n\r\nclass ValidateForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { bvn: \"\"}\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({ [evt.target.name]: evt.target.value })\r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault()\r\n        if(isNaN(this.state.bvn)){\r\n            alert(\"Please check the BVN and try again\");\r\n            this.setState({ bvn: \"\"});\r\n        } else if(this.state.bvn.length !== 11) {\r\n            alert(\"The BVN should contain 11 digits, Please check and try again\")\r\n        } else {\r\n            this.props.validate(this.state.bvn);\r\n            this.setState({ bvn: \"\"});\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {bvn} = this.state\r\n        return(\r\n            <form className=\"ValidateForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"bvn\">Customer Validation </label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"bvn\"\r\n                    name=\"bvn\"\r\n                    placeholder=\"Enter BVN\"\r\n                    value={bvn} \r\n                    onChange={this.handleChange}\r\n                    required\r\n                    disabled={(this.props.isLoaded) ? true: false}\r\n                    />\r\n                    {(this.props.isLoaded) ? \"\" : <button disabled={(this.props.isLoading) ? true : false}>{(this.props.isLoading) ? \"Validating...\" : \"Validate\"}</button>}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ValidateForm;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport \"./Validate.css\";\r\nimport ValidateForm from './ValidateForm';\r\n\r\nclass Validate extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { data: {}, isLoading:false, isLoaded: false}\r\n        this.validate = this.validate.bind(this);\r\n        this.renderDetails = this.renderDetails.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    submit(evt){\r\n        evt.preventDefault();\r\n        this.setState({\r\n            data:{},\r\n            isLoading:false,\r\n            isLoaded:false\r\n        })\r\n    }\r\n\r\n    validate(bvn){\r\n        this.setState({isLoading: true, isLoaded: false})\r\n        const URL = `https://ravesandboxapi.flutterwave.com/v2/kyc/bvn/${bvn}?seckey=${process.env.REACT_APP_RAVE_SECRET_API}`;\r\n        axios.get(URL).then(response => {\r\n            if(response.data.status === \"success\"){\r\n                let details = response.data.data\r\n                this.setState(st => ({\r\n                    isLoaded:true, \r\n                    isLoading:false,\r\n                    data: {...st.data, ...details}\r\n                }))\r\n            } else{\r\n                alert(\"An error occured, Please try again\");\r\n                this.setState({\r\n                    data:{},\r\n                    isLoading:false,\r\n                    isLoaded:false\r\n                })\r\n            }\r\n        })\r\n    }\r\n    renderDetails(){\r\n        const {isLoaded, isLoading, data } = this.state\r\n        if(isLoading){\r\n            return <div className={\"loader\"}></div>\r\n        } else{\r\n            if(isLoaded){\r\n                return (\r\n                    <div className=\"Validate-details\">\r\n                        <div className=\"Validate-hi\">Hi, {data[\"first_name\"]}</div>\r\n                        <form className=\"Validate-details-form\" onSubmit={this.submit}>\r\n                            <div>\r\n                                <label htmlFor=\"name\">BVN: </label>\r\n                                <input id=\"name\" defaultValue={data[\"bvn\"]} disabled />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"name\">First Name: </label>\r\n                                <input id=\"name\" defaultValue={data[\"first_name\"]} disabled />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"name\">Midlle Name: </label>\r\n                                <input id=\"name\" defaultValue={data[\"middle_name\"]} disabled />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"name\">Last Name: </label>\r\n                                <input id=\"name\" defaultValue={data[\"last_name\"]} disabled />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"name\">Date Of Birth: </label>\r\n                                <input id=\"name\" defaultValue={data[\"date_of_birth\"]} disabled />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"name\">Phone Number: </label>\r\n                                <input id=\"name\" defaultValue={data[\"phone_number\"]} disabled />\r\n                            </div>\r\n                            <button>OK</button>\r\n                        </form>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return <div></div>\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"d-flex\">\r\n                <div className=\"Validate\">\r\n                    <ValidateForm validate={this.validate} isLoading={this.state.isLoading} isLoaded={this.state.isLoaded}/>\r\n                    {this.renderDetails()}\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Validate;","import React from 'react';\nimport Validate from \"./Validate\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Validate />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}